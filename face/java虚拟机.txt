1.jdk java 程序最开发的最小环境
2.jre java 程序运行的标准环境
3.历史版本
javase 5 
1）引入泛型
2）增强循环，可以使用迭代方式
3）类型安全的枚举
4）可变参数
5）静态引入
6）元数据（注解）
7）引入 instrumentation
javase 6
1）支持脚本语言
2）引入 jdbc 4.0 API
3）引入 java compiler API
4）可插拔注解
5）增加对Native PKI(Public Key Infrastructure)、Java GSS(Generic Security Service)、Kerberos和LDAP(Lightweight Directory Access Protocol)的支持；
6）集成web services
7）做了很多优化
javase 7
1）switch 语句块中允许以字符串作为分支条件
2）在创建泛型对象时应以类型推断
3）在一个语句块中捕获多种异常
4）支持动态语言
5）支持 try-with-resources
6）引入java nio2开发包
7）数值类型可以用2进制字符串表示，并且可以在字符串表示中添加下划线；
钻石型语法；
null值的自动处理。
Java 8
函数式接口
Lambda表达式
接口的增强

4.java运行时区域包括哪些
程序计数器
虚拟机栈
方法区
堆
运行时常量池
直接内存

5.程序计数器（线程私有）
程序计数器 是一块较小的空间，可以看做是当前线程所执行字节码的行号指示器。分支，循环，跳转，异常处理，线程恢复等基础功能都需要依赖这个计数器完成。
由于java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式实现的，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，各线程之前的计数器互不影响，独立存储。
1）如果线程正在执行的是一个java方法，计数器记录的是正在执行的虚拟机字节码指令的地址。
2）如果正在执行的是native方法，这个计数器的值为空。
程序计数器是唯一一个没有规定任何 outOfMemoryError 的区域

6.java虚拟机栈（线程私有）
java虚拟机栈是线程私有的，生命周期与线程相同。
虚拟机栈描述的是 java 方法执行的内存模型，每个方法被执行的时候都会创建一个帧栈（stack frame），存储
1）局部变量表
2）操作栈
3）动态链接
4）方法出口
每个方法被调用到执行完成的过程，就对应着一个帧栈在虚拟机栈中从入栈到出栈的过程。
这个区域有两种情况
1）stackOverFlowError 线程请求的栈深度大于虚拟机所允许的深度。
2）outOfMemoryError 虚拟机栈扩展到无法申请足够的内存时

7.本地方法栈（线程私有）
虚拟机栈为虚拟机执行java方法（字节码）服务。
本地方法栈（native method stacks）为虚拟机使用到的 native 方法服务。

8.java堆（线程共享）
java堆（java heap）是java虚拟机中内存最大的一块。java堆在虚拟机启动时创建，被所有线程共享。
作用：存放对象实例。垃圾收集器主要管理的是java堆。java堆在物理上可以不连续，只要逻辑上连续即可。

9.方法区（线程共享）
方法区（Method Area）被所有线程共享，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
和 Java 堆一样，不需要连续的内存，可以选择固定的大小，更可以选择不实现垃圾收集。

10运行时常量池
运行时常量池（Runtime Constant Pool）是方法区的一部分。保存 Class 文件中的符号引用、翻译出来的直接引用。运行时常量池可以在运行期间将新的常量放入池中。




