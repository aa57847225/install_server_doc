父加载器 ClassLoader
双亲委派

类加载的过程：装载  链接 初始化  使用 卸载
链接：验证 准备 解析

装载：查找并加载类的二进制数据，也就是Class文件。在内存中生成代表此类的java.lang.Class对象,作为该类访问入口
链接：把类的二进制数据合并到JRE中
验证：确保被加载类的正确性；避免万一有高手自己写一个class文件，让JVM加载并运行，用于恶意用途
准备：正式为类变量分配内存并设置变量的初始值.(仅包含类变量,不包含实例变量)
1）为静态变量分配内存，并将其初始化为默认值 2）给常量分配内存并设置值
解析：虚拟机将常量池中的符号引用替换为直接引用,解析动作主要针对类或接口,字段,类方法,方法类型等等
初始化：该阶段,才真正意义上的开始执行类中定义的java程序代码.该阶段会执行类构造器，对类的静态变量，静态代码块执行初始化操作

JVM通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器。

启动类加载器 boostrap classloader <-  扩展类加载器 extension classloader  <- 应用类加载器 application classloader

<-  自定义加载器 user classloader
<-  自定义加载器   user classloader

加载到内存中  使用 native 方法 调用本地方法  dll,so





1)准备的时候  t  默认 null  aa=0 bb = 0
2)初始化的时候    Test t = new Test() =》调用构造 aa=1 bb =1
3) aa=1 bb =0;
public class Test {


    private static Test t = new Test();

    public static  int  aa;
    public static  int  bb = 0;

    private Test(){
        aa++;
        bb++;
    }

    public static Test getTest(){
        return t;
    }

    public static void main(String[] args) {
        Test t = Test.getTest();
        System.out.println(t.aa);
        System.out.println(t.bb);
    }
}



